// Code generated by ent, DO NOT EDIT.

package ent

import (
	"arjunmal1311/fans_flow_on_chain/backend/ent/predicate"
	"arjunmal1311/fans_flow_on_chain/backend/ent/subscriptionzkevm"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubscriptionZkEVMDelete is the builder for deleting a SubscriptionZkEVM entity.
type SubscriptionZkEVMDelete struct {
	config
	hooks    []Hook
	mutation *SubscriptionZkEVMMutation
}

// Where appends a list predicates to the SubscriptionZkEVMDelete builder.
func (szed *SubscriptionZkEVMDelete) Where(ps ...predicate.SubscriptionZkEVM) *SubscriptionZkEVMDelete {
	szed.mutation.Where(ps...)
	return szed
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (szed *SubscriptionZkEVMDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, szed.sqlExec, szed.mutation, szed.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (szed *SubscriptionZkEVMDelete) ExecX(ctx context.Context) int {
	n, err := szed.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (szed *SubscriptionZkEVMDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(subscriptionzkevm.Table, sqlgraph.NewFieldSpec(subscriptionzkevm.FieldID, field.TypeInt))
	if ps := szed.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, szed.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	szed.mutation.done = true
	return affected, err
}

// SubscriptionZkEVMDeleteOne is the builder for deleting a single SubscriptionZkEVM entity.
type SubscriptionZkEVMDeleteOne struct {
	szed *SubscriptionZkEVMDelete
}

// Where appends a list predicates to the SubscriptionZkEVMDelete builder.
func (szedo *SubscriptionZkEVMDeleteOne) Where(ps ...predicate.SubscriptionZkEVM) *SubscriptionZkEVMDeleteOne {
	szedo.szed.mutation.Where(ps...)
	return szedo
}

// Exec executes the deletion query.
func (szedo *SubscriptionZkEVMDeleteOne) Exec(ctx context.Context) error {
	n, err := szedo.szed.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{subscriptionzkevm.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (szedo *SubscriptionZkEVMDeleteOne) ExecX(ctx context.Context) {
	if err := szedo.Exec(ctx); err != nil {
		panic(err)
	}
}
