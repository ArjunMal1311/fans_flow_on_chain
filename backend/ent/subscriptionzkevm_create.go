// Code generated by ent, DO NOT EDIT.

package ent

import (
	"arjunmal1311/fans_flow_on_chain/backend/ent/subscriptionzkevm"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubscriptionZkEVMCreate is the builder for creating a SubscriptionZkEVM entity.
type SubscriptionZkEVMCreate struct {
	config
	mutation *SubscriptionZkEVMMutation
	hooks    []Hook
}

// Mutation returns the SubscriptionZkEVMMutation object of the builder.
func (szec *SubscriptionZkEVMCreate) Mutation() *SubscriptionZkEVMMutation {
	return szec.mutation
}

// Save creates the SubscriptionZkEVM in the database.
func (szec *SubscriptionZkEVMCreate) Save(ctx context.Context) (*SubscriptionZkEVM, error) {
	return withHooks(ctx, szec.sqlSave, szec.mutation, szec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (szec *SubscriptionZkEVMCreate) SaveX(ctx context.Context) *SubscriptionZkEVM {
	v, err := szec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (szec *SubscriptionZkEVMCreate) Exec(ctx context.Context) error {
	_, err := szec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (szec *SubscriptionZkEVMCreate) ExecX(ctx context.Context) {
	if err := szec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (szec *SubscriptionZkEVMCreate) check() error {
	return nil
}

func (szec *SubscriptionZkEVMCreate) sqlSave(ctx context.Context) (*SubscriptionZkEVM, error) {
	if err := szec.check(); err != nil {
		return nil, err
	}
	_node, _spec := szec.createSpec()
	if err := sqlgraph.CreateNode(ctx, szec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	szec.mutation.id = &_node.ID
	szec.mutation.done = true
	return _node, nil
}

func (szec *SubscriptionZkEVMCreate) createSpec() (*SubscriptionZkEVM, *sqlgraph.CreateSpec) {
	var (
		_node = &SubscriptionZkEVM{config: szec.config}
		_spec = sqlgraph.NewCreateSpec(subscriptionzkevm.Table, sqlgraph.NewFieldSpec(subscriptionzkevm.FieldID, field.TypeInt))
	)
	return _node, _spec
}

// SubscriptionZkEVMCreateBulk is the builder for creating many SubscriptionZkEVM entities in bulk.
type SubscriptionZkEVMCreateBulk struct {
	config
	err      error
	builders []*SubscriptionZkEVMCreate
}

// Save creates the SubscriptionZkEVM entities in the database.
func (szecb *SubscriptionZkEVMCreateBulk) Save(ctx context.Context) ([]*SubscriptionZkEVM, error) {
	if szecb.err != nil {
		return nil, szecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(szecb.builders))
	nodes := make([]*SubscriptionZkEVM, len(szecb.builders))
	mutators := make([]Mutator, len(szecb.builders))
	for i := range szecb.builders {
		func(i int, root context.Context) {
			builder := szecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscriptionZkEVMMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, szecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, szecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, szecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (szecb *SubscriptionZkEVMCreateBulk) SaveX(ctx context.Context) []*SubscriptionZkEVM {
	v, err := szecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (szecb *SubscriptionZkEVMCreateBulk) Exec(ctx context.Context) error {
	_, err := szecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (szecb *SubscriptionZkEVMCreateBulk) ExecX(ctx context.Context) {
	if err := szecb.Exec(ctx); err != nil {
		panic(err)
	}
}
