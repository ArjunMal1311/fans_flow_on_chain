// Code generated by ent, DO NOT EDIT.

package ent

import (
	"arjunmal1311/only_fans_on_chain/backend/ent/predicate"
	"arjunmal1311/only_fans_on_chain/backend/ent/subscriptionmoonbeam"
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubscriptionMoonbeamDelete is the builder for deleting a SubscriptionMoonbeam entity.
type SubscriptionMoonbeamDelete struct {
	config
	hooks    []Hook
	mutation *SubscriptionMoonbeamMutation
}

// Where appends a list predicates to the SubscriptionMoonbeamDelete builder.
func (smd *SubscriptionMoonbeamDelete) Where(ps ...predicate.SubscriptionMoonbeam) *SubscriptionMoonbeamDelete {
	smd.mutation.Where(ps...)
	return smd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (smd *SubscriptionMoonbeamDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, smd.sqlExec, smd.mutation, smd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (smd *SubscriptionMoonbeamDelete) ExecX(ctx context.Context) int {
	n, err := smd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (smd *SubscriptionMoonbeamDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(subscriptionmoonbeam.Table, sqlgraph.NewFieldSpec(subscriptionmoonbeam.FieldID, field.TypeInt))
	if ps := smd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, smd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	smd.mutation.done = true
	return affected, err
}

// SubscriptionMoonbeamDeleteOne is the builder for deleting a single SubscriptionMoonbeam entity.
type SubscriptionMoonbeamDeleteOne struct {
	smd *SubscriptionMoonbeamDelete
}

// Where appends a list predicates to the SubscriptionMoonbeamDelete builder.
func (smdo *SubscriptionMoonbeamDeleteOne) Where(ps ...predicate.SubscriptionMoonbeam) *SubscriptionMoonbeamDeleteOne {
	smdo.smd.mutation.Where(ps...)
	return smdo
}

// Exec executes the deletion query.
func (smdo *SubscriptionMoonbeamDeleteOne) Exec(ctx context.Context) error {
	n, err := smdo.smd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{subscriptionmoonbeam.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (smdo *SubscriptionMoonbeamDeleteOne) ExecX(ctx context.Context) {
	if err := smdo.Exec(ctx); err != nil {
		panic(err)
	}
}
