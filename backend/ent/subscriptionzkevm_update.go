// Code generated by ent, DO NOT EDIT.

package ent

import (
	"arjunmal1311/only_fans_on_chain/backend/ent/predicate"
	"arjunmal1311/only_fans_on_chain/backend/ent/subscriptionzkevm"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubscriptionZkEVMUpdate is the builder for updating SubscriptionZkEVM entities.
type SubscriptionZkEVMUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionZkEVMMutation
}

// Where appends a list predicates to the SubscriptionZkEVMUpdate builder.
func (szeu *SubscriptionZkEVMUpdate) Where(ps ...predicate.SubscriptionZkEVM) *SubscriptionZkEVMUpdate {
	szeu.mutation.Where(ps...)
	return szeu
}

// Mutation returns the SubscriptionZkEVMMutation object of the builder.
func (szeu *SubscriptionZkEVMUpdate) Mutation() *SubscriptionZkEVMMutation {
	return szeu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (szeu *SubscriptionZkEVMUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, szeu.sqlSave, szeu.mutation, szeu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (szeu *SubscriptionZkEVMUpdate) SaveX(ctx context.Context) int {
	affected, err := szeu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (szeu *SubscriptionZkEVMUpdate) Exec(ctx context.Context) error {
	_, err := szeu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (szeu *SubscriptionZkEVMUpdate) ExecX(ctx context.Context) {
	if err := szeu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (szeu *SubscriptionZkEVMUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(subscriptionzkevm.Table, subscriptionzkevm.Columns, sqlgraph.NewFieldSpec(subscriptionzkevm.FieldID, field.TypeInt))
	if ps := szeu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if n, err = sqlgraph.UpdateNodes(ctx, szeu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionzkevm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	szeu.mutation.done = true
	return n, nil
}

// SubscriptionZkEVMUpdateOne is the builder for updating a single SubscriptionZkEVM entity.
type SubscriptionZkEVMUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionZkEVMMutation
}

// Mutation returns the SubscriptionZkEVMMutation object of the builder.
func (szeuo *SubscriptionZkEVMUpdateOne) Mutation() *SubscriptionZkEVMMutation {
	return szeuo.mutation
}

// Where appends a list predicates to the SubscriptionZkEVMUpdate builder.
func (szeuo *SubscriptionZkEVMUpdateOne) Where(ps ...predicate.SubscriptionZkEVM) *SubscriptionZkEVMUpdateOne {
	szeuo.mutation.Where(ps...)
	return szeuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (szeuo *SubscriptionZkEVMUpdateOne) Select(field string, fields ...string) *SubscriptionZkEVMUpdateOne {
	szeuo.fields = append([]string{field}, fields...)
	return szeuo
}

// Save executes the query and returns the updated SubscriptionZkEVM entity.
func (szeuo *SubscriptionZkEVMUpdateOne) Save(ctx context.Context) (*SubscriptionZkEVM, error) {
	return withHooks(ctx, szeuo.sqlSave, szeuo.mutation, szeuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (szeuo *SubscriptionZkEVMUpdateOne) SaveX(ctx context.Context) *SubscriptionZkEVM {
	node, err := szeuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (szeuo *SubscriptionZkEVMUpdateOne) Exec(ctx context.Context) error {
	_, err := szeuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (szeuo *SubscriptionZkEVMUpdateOne) ExecX(ctx context.Context) {
	if err := szeuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (szeuo *SubscriptionZkEVMUpdateOne) sqlSave(ctx context.Context) (_node *SubscriptionZkEVM, err error) {
	_spec := sqlgraph.NewUpdateSpec(subscriptionzkevm.Table, subscriptionzkevm.Columns, sqlgraph.NewFieldSpec(subscriptionzkevm.FieldID, field.TypeInt))
	id, ok := szeuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SubscriptionZkEVM.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := szeuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscriptionzkevm.FieldID)
		for _, f := range fields {
			if !subscriptionzkevm.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subscriptionzkevm.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := szeuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	_node = &SubscriptionZkEVM{config: szeuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, szeuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscriptionzkevm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	szeuo.mutation.done = true
	return _node, nil
}
