// Code generated by ent, DO NOT EDIT.

package ent

import (
	"arjunmal1311/fans_flow_on_chain/backend/ent/subscriptionmoonbeam"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// SubscriptionMoonbeam is the model entity for the SubscriptionMoonbeam schema.
type SubscriptionMoonbeam struct {
	config
	// ID of the ent.
	ID           int `json:"id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SubscriptionMoonbeam) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case subscriptionmoonbeam.FieldID:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SubscriptionMoonbeam fields.
func (sm *SubscriptionMoonbeam) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case subscriptionmoonbeam.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sm.ID = int(value.Int64)
		default:
			sm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SubscriptionMoonbeam.
// This includes values selected through modifiers, order, etc.
func (sm *SubscriptionMoonbeam) Value(name string) (ent.Value, error) {
	return sm.selectValues.Get(name)
}

// Update returns a builder for updating this SubscriptionMoonbeam.
// Note that you need to call SubscriptionMoonbeam.Unwrap() before calling this method if this SubscriptionMoonbeam
// was returned from a transaction, and the transaction was committed or rolled back.
func (sm *SubscriptionMoonbeam) Update() *SubscriptionMoonbeamUpdateOne {
	return NewSubscriptionMoonbeamClient(sm.config).UpdateOne(sm)
}

// Unwrap unwraps the SubscriptionMoonbeam entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sm *SubscriptionMoonbeam) Unwrap() *SubscriptionMoonbeam {
	_tx, ok := sm.config.driver.(*txDriver)
	if !ok {
		panic("ent: SubscriptionMoonbeam is not a transactional entity")
	}
	sm.config.driver = _tx.drv
	return sm
}

// String implements the fmt.Stringer.
func (sm *SubscriptionMoonbeam) String() string {
	var builder strings.Builder
	builder.WriteString("SubscriptionMoonbeam(")
	builder.WriteString(fmt.Sprintf("id=%v", sm.ID))
	builder.WriteByte(')')
	return builder.String()
}

// SubscriptionMoonbeams is a parsable slice of SubscriptionMoonbeam.
type SubscriptionMoonbeams []*SubscriptionMoonbeam
